<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/12/26/1.%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF/"/>
    <url>/2021/12/26/1.%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h2 id="1-函数模板"><a href="#1-函数模板" class="headerlink" title="1.函数模板"></a>1.函数模板</h2><ol><li><p>利用模板可以定义出不同类型的相同功能代码，将模板中的类型空缺出来，编译的时候根据调用时传的参数实例化出不同类型的函数。使用模板减小代码量，使得代码更加灵活。</p></li><li><p>函数模板的示例</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typedef</span>  T&gt;<br><span class="hljs-comment">//当模板被实例化时，T会成为一个具体的类型</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">( T &amp;a,T &amp;b)</span></span><br><span class="hljs-function"></span>&#123;<br>   T temp=a;<br>   a=b;<br>   b=temp;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a=<span class="hljs-number">1</span>,b=<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">char</span> c=<span class="hljs-string">&#x27;1&#x27;</span>;<br>    <span class="hljs-keyword">char</span> d=<span class="hljs-string">&#x27;2&#x27;</span>;<br>    <span class="hljs-built_in">swap</span>(a,b);<span class="hljs-comment">//函数模板的隐式调用</span><br>    swap&lt;<span class="hljs-keyword">char</span>&gt;(c,d);<span class="hljs-comment">//函数模板的显示调用，更加节省时间</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-智能指针"><a href="#2-智能指针" class="headerlink" title="2.智能指针"></a>2.智能指针</h2><p>智能指针是为了解决内存的泄露以及内存的二次释放和已经释放的内存对其进行操作的问题。</p><p>1.shared_ptr可以管理内存，不同的智能指针对这个内存进行管理时，引用计数++，当智能指针管理其他的内存或者销毁时，引用计数–，这些++和–都是原子性的。当引用计数为0时，最后一个指针需要对这块内存进行释放。创建多个 shared_ptr 的正常方法是使用一个已存在的shared_ptr 进行创建，而不是使用同一个原始指针进行创建。</p><p>2.1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><br><span class="hljs-built_in">Person</span>(<span class="hljs-keyword">int</span> _age,std::string _name):<span class="hljs-built_in">age</span>(_age),<span class="hljs-built_in">name</span>(_name)&#123;&#125;<br><span class="hljs-keyword">int</span> age;<br>std::string name;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person *person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Person</span>(<span class="hljs-number">18</span>, <span class="hljs-string">&quot;mawenjie&quot;</span>);<br><span class="hljs-function">std::shared_ptr&lt;Person&gt; <span class="hljs-title">ptr1</span><span class="hljs-params">(person)</span></span>;<br>std::cout &lt;&lt; ptr1.<span class="hljs-built_in">use_count</span>() &lt;&lt; std::endl;<br><span class="hljs-comment">//使用make_shared进行初始化</span><br>std::shared_ptr&lt;Person&gt; ptr2 = ptr1;<br>std::cout &lt;&lt; ptr2.<span class="hljs-built_in">use_count</span>() &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210826095349225.png" alt="image-20210826095349225"></p><p>2.如果使用shared_ptr多次定义同一个原生的指针，会导致内存被多次释放，程序会崩。正确的做法是使用已经存在的智能指针进行创建。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><br><span class="hljs-built_in">Person</span>(<span class="hljs-keyword">int</span> _age,std::string _name):<span class="hljs-built_in">age</span>(_age),<span class="hljs-built_in">name</span>(_name)<br>    &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;new&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>~<span class="hljs-built_in">Person</span>()<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;delete&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-keyword">int</span> age;<br>std::string name;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person *person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Person</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;mawenjie&quot;</span>);<br><span class="hljs-function">std::shared_ptr&lt;Person&gt; <span class="hljs-title">ptr1</span><span class="hljs-params">(person)</span></span>;<br>std::cout &lt;&lt; ptr1.<span class="hljs-built_in">use_count</span>() &lt;&lt; std::endl;<br><span class="hljs-function">std::shared_ptr&lt;Person&gt; <span class="hljs-title">ptr2</span><span class="hljs-params">(person)</span></span>;;<br>std::cout &lt;&lt; ptr2.<span class="hljs-built_in">use_count</span>() &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210826102431140.png" alt="image-20210826102431140"></p><p>3.不要把this指针给shared_ptr管理，否则会导致重复析构，原因的本质是多次使用shared_ptr多次定义同一个原生指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Person</span></span><br><span class="hljs-class">&#123;</span><br><br><span class="hljs-built_in">Person</span>(<span class="hljs-keyword">int</span> _age,std::string _name):<span class="hljs-built_in">age</span>(_age),<span class="hljs-built_in">name</span>(_name)<br>    &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;new&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>    std::shared_ptr &lt;Person&gt; <span class="hljs-built_in">fun</span>()<br>&#123;<br><span class="hljs-keyword">return</span> std::shared_ptr&lt;Person&gt;(<span class="hljs-keyword">this</span>);<br>&#125;<br>~<span class="hljs-built_in">Person</span>()<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;delete&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-keyword">int</span> age;<br>std::string name;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person *person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Person</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;mawenjie&quot;</span>);<br><span class="hljs-function">std::shared_ptr&lt;Person&gt; <span class="hljs-title">ptr1</span><span class="hljs-params">(person)</span></span>;<br>ptr1-&gt;<span class="hljs-built_in">fun</span>();<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210826102641868.png" alt="image-20210826102641868"></p><p>4.对于不能把shared_ptr管理的对象返回，enable_shared_from_this解决这一问题。有时需要将管理内存的指针作为函数的参数，</p><p>std::enable_shared_from_this 能让一个对象（假设其名为 t ，且已被一个 std::shared_ptr 对象 pt 管理）安全地生成其他额外的 std::shared_ptr 实例（假设名为 pt1, pt2, … ） ，它们与 pt 共享对象 t 的所有权。<br>       若一个类 T 继承 std::enable_shared_from_this<T> ，则会为该类 T 提供成员函数： shared_from_this 。 当 T 类型对象 t 被一个为名为 pt 的 std::shared_ptr<T> 类对象管理时，调用 T::shared_from_this 成员函数，将会返回一个新的 std::shared_ptr<T> 对象，它与 pt 共享 t 的所有权。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Person</span>:</span>std::enable_shared_from_this&lt;Person&gt;<br>&#123;<br><br><span class="hljs-built_in">Person</span>(<span class="hljs-keyword">int</span> _age, std::string _name) :<span class="hljs-built_in">age</span>(_age), <span class="hljs-built_in">name</span>(_name) &#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;new&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>std::shared_ptr &lt;Person&gt; <span class="hljs-built_in">fun</span>()<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">shared_from_this</span>();<br>&#125;<br>~<span class="hljs-built_in">Person</span>()<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;delete&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><span class="hljs-keyword">int</span> age;<br>std::string name;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Person *person = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Person</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;mawenjie&quot;</span>);<br><span class="hljs-function">std::shared_ptr&lt;Person&gt; <span class="hljs-title">ptr1</span><span class="hljs-params">(person)</span></span>;<br>ptr1-&gt;<span class="hljs-built_in">fun</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210826105550096.png" alt="image-20210826105550096"></p><p>5.shared_ptr的循环引用问题</p><p>当一个类定义着它自己类型的成员，在使用的时候很容易出现问题，比如这个对象管理着它自己类中的成员变量，就会导致无法析构。或者两个相同类型的智能指针shared_ptr分别管理着对方的对象，也会出现问题，导致这两个对象都无法释放，最终造成内存泄漏。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>;</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">A</span>()<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;construct A&quot;</span>&lt;&lt;std::endl;<br>&#125;<br>~<span class="hljs-built_in">A</span>()<br>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;destruct A&quot;</span> &lt;&lt; std::endl;<br>&#125;<br>std::shared_ptr&lt;A&gt; ptr_a;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::shared_ptr&lt;A&gt; ptrA = std::make_shared&lt;A&gt;();<br>std::shared_ptr&lt;A&gt; ptrB = std::make_shared&lt;A&gt;();<br>ptrA-&gt;ptr_a = ptrB;<br>ptrB-&gt;ptr_a= ptrA;<br>  <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\admin\AppData\Roaming\Typora\typora-user-images\image-20210826145935918.png" alt="image-20210826145935918"></p><p>4.回调函数，回调函数就是将一个函数作为另一个函数的参数，这样做可以使得调用者不用关心被调用者具体是哪个函数，提高了代码的灵活性。使得代码的结构进行分离。</p><p>比如下面这个代码，要完成上楼的业务，可以通过两种方案，通过使用回调函数不用考虑具体是哪种方案，上层通过调用时传的函数来决定具体调用哪个函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">a</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;坐电梯&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">b</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;爬楼梯&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">shanglou</span><span class="hljs-params">(<span class="hljs-keyword">int</span> (*callback)())</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">callback</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">shanglou</span>(a);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-C-11-function"><a href="#3-C-11-function" class="headerlink" title="3.C++ 11 function"></a>3.C++ 11 function</h2><p>使用function可以封装不同类型的可调用对象，比如函数，类的成员函数，匿名函数等。这样做的目的是使得一个封装的对象可以调用不同的函数的参数和返回值都相同的可调用对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;stdafx.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;functional&gt;</span></span><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;普通函数&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-keyword">public</span>:<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">class_sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>std::cout &lt;&lt; <span class="hljs-string">&quot;类成员函数&quot;</span> &lt;&lt; std::endl;<br><span class="hljs-keyword">return</span> a + b;<br>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>std::function&lt;<span class="hljs-built_in"><span class="hljs-keyword">int</span></span>(<span class="hljs-keyword">int</span> ,<span class="hljs-keyword">int</span>)&gt; fun;<br>fun = sum;<br>std::cout &lt;&lt; <span class="hljs-built_in">fun</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)&lt;&lt;std::endl;<br>B b;<br><span class="hljs-comment">//fun = b.class_sum;</span><br>std::cout &lt;&lt; <span class="hljs-built_in">fun</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) &lt;&lt; std::endl;<br>fun = std::<span class="hljs-built_in">bind</span>(&amp;B::class_sum,b, std::placeholders::_1, std::placeholders::_2);<br><br>std::cout &lt;&lt; <span class="hljs-built_in">fun</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) &lt;&lt; std::endl;<br><span class="hljs-comment">//std::cout &lt;&lt; fun(1, 2) &lt;&lt; std::endl;</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>从上面代码可以看出function的便利，function将所有相同类型的不同函数封装起来，具体调用哪个可以让函数的地址和function对象进行绑定，如何使用的时候直接调用function的对象。</p><p>std::bind可以看作一个通用的函数适配器，它接受一个可调用对象，生成一个新的可调用对象来适应原对象的参数列表。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/12/26/hello-world/"/>
    <url>/2021/12/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
